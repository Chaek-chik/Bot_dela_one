import os
import asyncio
from telegram import Update, ForceReply
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# Загрузка токена из файла .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# Список дел (хранится в памяти)
todo_list = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_markdown_v2(
        fr'Привет, {user.mention_markdown_v2()}\! Я ваш ToDo бот\.',
        reply_markup=ForceReply(selective=True),
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Используйте команды /add, /list, /remove для управления списком дел. Для очищения чата используйте команду /clear.')

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    item = ' '.join(context.args)
    if item:
        todo_list.append(item)
        await update.message.reply_text(f'Добавлено: {item}')
    else:
        await update.message.reply_text('Пожалуйста, укажите задачу после команды /add.')

async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if todo_list:
        message = 'Ваш список дел:\n' + '\n'.join(f'{idx+1}. {item}' for idx, item in enumerate(todo_list))
    else:
        message = 'Ваш список дел пуст.'
    await update.message.reply_text(message)

async def remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        index = int(context.args[0]) - 1
        if 0 <= index < len(todo_list):
            removed_item = todo_list.pop(index)
            await update.message.reply_text(f'Удалено: {removed_item}')
        else:
            await update.message.reply_text('Неверный индекс.')
    except (IndexError, ValueError):
        await update.message.reply_text('Пожалуйста, укажите индекс задачи после команды /remove.')

async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    message_id = update.message.message_id

    await update.message.reply_text("Начинаю очистку чата...")

    # Получение списка сообщений для удаления
    try:
        messages = await context.bot.get_chat(chat_id)
        for message in messages:
            try:
                await context.bot.delete_message(chat_id, message.message_id)
                await asyncio.sleep(0.1)  # Добавляем задержку для предотвращения перегрузки сервера
            except Exception as e:
                print(f"Ошибка при удалении сообщения: {e}")
    except Exception as e:
        print(f"Ошибка при получении сообщений: {e}")

    await update.message.reply_text("Очистка чата завершена.")

def main() -> None:
    # Создание объекта Application и передача ему токена вашего бота.
    application = Application.builder().token(TOKEN).build()

    # Команды
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CommandHandler("list", list_items))
    application.add_handler(CommandHandler("remove", remove))
    application.add_handler(CommandHandler("clear", clear_chat))

    # Запуск бота
    application.run_polling()

if __name__ == '__main__':
    main()
